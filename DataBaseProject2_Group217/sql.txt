create table if not exists public.Authors
(
    Author_name varchar(50)  not null
        primary key ,
    Author_ID   varchar(20)
        unique,
    Author_Registration_Time timestamp(0),
    Author_Phone  varchar(20)
);

create table if not exists public.Followers
(
    Followers varchar(50) not null
        references authors(author_name),
    Followed  varchar(50) not null
        references authors(author_name),
    primary key (Followers, Followed)
);

create table if not exists public.births
(
    author_name  varchar(50) not null
    primary key references authors(author_name),
    birth_year numeric(4),
    birth_month numeric(2),
    birth_day numeric(2)
);

create table if not exists public.posts
(
    post_id  int not null
        primary key ,
    title    text not null,
    content  text not null,
    posting_time  timestamp(0) not null
);

create table if not exists public.categories
(
    post_id  int not null
       references posts(post_id),
    category varchar(50) not null ,
    primary key (post_id, category)
);

create table if not exists public.areas
(
    post_id int not null
       primary key references posts(post_id),
    posting_city   varchar(50) not null ,
    posting_country  varchar(50) not null
);

create table if not exists public.post_author_relation
(
    post_id int not null
       references posts(post_id),
    author_name varchar(50) not null
       references authors(author_name),
    relation varchar(10) not null,
        primary key (post_id, author_name, relation)
);

create table if not exists public.replies
(
    reply_id int not null
       primary key,
    floor int not null,
    post_id int not null
       references posts(post_id),
    reply_author varchar(50) not null
        references authors(author_name),
    reply_star int not null,
    reply_content text not null,
    unique (post_id, floor, reply_author, reply_star, reply_content)
);

create table if not exists public.upper_replies
(
    reply_id int not null
    references replies(reply_id),
    upper_reply_id int
    references replies(reply_id),
    primary key (reply_id, upper_reply_id)
);

create table if not exists public.reply_author_relation
(
    reply_id int not null
    references replies(reply_id),
    author_name varchar(50) not null
    references authors(author_name),
    relation varchar(10) not null,
    primary key (reply_id, author_name, relation)
);

create table if not exists public.shield
(
    shielders varchar(50) not null
        references authors(author_name),
    shielded  varchar(50) not null
        references authors(author_name),
    primary key (shielders, shielded)
);

create or replace function birth_insert()
    returns trigger
    as
    $$
    declare
        year int := 0;
        month int := 0;
        day int := 0;
    begin
        year := (ascii(substr(new.Author_ID, 7, 1)) - 48) * 1000 + (ascii(substr(new.Author_ID, 8, 1)) - 48) * 100 + (ascii(substr(new.Author_ID, 9, 1)) - 48) * 10 + (ascii(substr(new.Author_ID, 10, 1)) - 48);
        month := (ascii(substr(new.Author_ID, 11, 1)) - 48) * 10 + (ascii(substr(new.Author_ID, 12, 1)) - 48);
        day := (ascii(substr(new.Author_ID, 13, 1)) - 48) * 10 + (ascii(substr(new.Author_ID, 14, 1)) - 48);
        insert into births(author_name, birth_year, birth_month, birth_day) values (new.author_name, year, month, day);
        return new;
    end;
    $$
    language plpgsql;

create trigger authors_trigger_insert
    after insert
    on authors
    for each row
    execute procedure birth_insert();

create or replace function birth_delete()
    returns trigger
    as
    $$
    begin
        delete from births where births.author_name = old.author_name;
        return old;
    end;
    $$
    language plpgsql;

create trigger authors_trigger_delete
    before delete
    on authors
    for each row
    execute procedure birth_delete();

create sequence posts_post_id_seq start with 203;

alter table posts alter column post_id set default nextval('posts_post_id_seq');

create sequence replies_reply_id_seq start with 4238;

alter table replies alter column reply_id set default nextval('replies_reply_id_seq');

alter table posts add column anonymity varchar(1) default 'N';

alter table replies add column anonymity varchar(1) default 'N';

alter table posts add column image bytea default null;

create view post_view as
select posts.post_id, title, content, posting_time, posts.anonymity, author_name
from posts join post_author_relation
    on posts.post_id = post_author_relation.post_id where relation = 'P';

   create view reply_view as
   select replies.reply_id, replies.floor, replies.post_id, replies.reply_author, replies.reply_star, replies.reply_content,
            replies.anonymity, upper_reply_id
    from replies left join upper_replies on replies.reply_id = upper_replies.reply_id order by reply_id;



create user kuang with password '123456';
grant all privileges on database "Project1" to kuang;
grant select on table areas to kuang;
grant select on table authors to kuang;
grant select on table births to kuang;
grant select on table categories to kuang;
grant select on table followers to kuang;
grant select on table post_author_relation to kuang;
grant select on table posts to kuang;
grant select on table replies to kuang;
grant select on table reply_author_relation to kuang;
grant select on table shield to kuang;
grant select on table upper_replies to kuang;

create index search1 on posts(posting_time);
create index search2 on posts(title);
create index search3 on posts(content);
create index search4 on posts(posting_time,title);
create index search5 on posts(posting_time,content);
create index search6 on posts(title,content);
create index search7 on posts(title,content,posting_time);

create or replace procedure deletes(name varchar(50),relations varchar(10),postid  int  )
    language plpgsql
as
    $$
    begin
        delete from post_author_relation where author_name=name and relation=relations and post_id=postid;
    end;
    $$;

create or replace procedure inserts(name varchar(50),relations varchar(10),postid  int  )
    language plpgsql
as
    $$
    begin
insert into post_author_relation(post_id, author_name, relation) values (postid, name, relations);
    end;
    $$;